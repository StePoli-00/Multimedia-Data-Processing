#include <fstream>
#include <iostream>
#include <cstdio>
#include <ios>
#include <cstdint>
#include <vector>
#include <algorithm>
#include <deque>

struct node {
	float val_;
	char car_; 
	int number_;
	node* left_; 
	node* right_; 

	node(){
		val_ = NULL;
		left_ = NULL; 
		right_ = NULL; 
		number_ = 0; 
		car_ = NULL; 
	}
};

int compare_probab(node& a, node& b) {
	if (a.val_ > b.val_) {
		return  1; 
	}
	else if (a.val_ < b.val_) {
		return -1; 
	}
	else {
		return 0; 
	}
}

template<typename T>
std::istream& raw_read(std::istream& is, T& val, size_t size = sizeof(T)) {
	return is.read(reinterpret_cast<char*>(&val), size);
}

class bitreader {
	uint8_t buffer_;
	uint8_t n_ = 0;
	std::istream& is_;

public:
	bitreader(std::istream& is) : is_(is) {}

	uint32_t read_bit() {
		if (n_ == 0) {
			raw_read(is_, buffer_);
			n_ = 8;
		}
		--n_;
		return (buffer_ >> n_) & 1;
	}

	uint32_t read(uint8_t n) {
		uint32_t u = 0;
		while (n-- > 0) {
			u = (u << 1) | read_bit();
		}
		return u;
	}

	uint32_t operator()(uint8_t n) {
		return read(n);
	}

	bool fail() const {
		return is_.fail();
	}

	explicit operator bool() const {
		return !fail();
	}
};

void counting_entries(node* root, uint8_t* count) {
	*count += root->number_;
	if (root->left_ == NULL && root->right_ == NULL) {
		return;
	}
	else {
		counting_entries(root->left_, count);
		counting_entries(root->right_, count);
	}
}

node* generate_tree(std::ifstream& fin) {

	bitreader br(fin);
	float occ[256] = {0};  
	uint32_t n_tot = 0; 
	while (1) {
		uint8_t read = br.read(8); 
		if (br.fail()) {
			break; 
		}
		++n_tot;
		occ[read] += 1; 
	}

	std::vector <node> leaf; 

	for (int i = 0; i < 256; ++i) {
		if (occ[i] != 0) {
			node tmp;
			tmp.number_ = int(occ[i]); 
			tmp.car_ = char(i);
			occ[i] = occ[i] / n_tot;
			tmp.val_ = occ[i]; 
			leaf.push_back(tmp); 
		}
	}

	std::sort(leaf.begin(), leaf.end(), [](node a, node b) { return b.val_ < a.val_; });

	//creazione albero
	std::deque<node*> coda; 

	for (auto& x : leaf) {
		coda.push_back(new node(x)); 
	}

	float probabilities = 0; 
	size_t n = coda.size();  
	while(1) {
		node *left = coda.back();
		probabilities = coda.back()->val_;
		coda.pop_back(); 
		probabilities += coda.back()->val_; 
		node* right = NULL; 
		right = coda.back();
		coda.pop_back();
		node *parent = new node();
		parent->val_ = probabilities; 
		parent->left_ = left; 
		parent->right_ = right;
		parent->car_ = NULL; 
		parent->number_ = 0; 
		coda.push_back(parent); 
		if (probabilities == 1.0) {
			break; 
		}
	}
	
	return coda.front(); 
}

int decode(char* argc[]) {
	return 0; 
}

int code(char* argc[]) {
	std::ifstream fin(argc[2]); 
	std::ofstream fout(argc[3], std::ios::binary); 
	if (!fin) {
		std::cout << "Error opening files.";  
		return -1; 
	}

	std::string magic_number = "HUFFMAN1"; 
	node *tree = generate_tree(fin);
	uint8_t entries = 0;
	counting_entries(tree, &entries); 
	return 0; 
}

int main(int argv, char* argc[]) {

	if (argv != 4) {
		std::cout << "Error number of parameters."; 
		return -1; 
	}

	if (*argc[1] != 'c' && *argc[1] != 'd') {
		std::cout << "Error first parameter must be 'c' or 'd'."; 
		return -1; 
	}

	if (*argc[1] == 'c') {
		int res = code(argc);
		return res; 
	}
	else {
		int res = decode(argc); 
		return res; 
	}

	return 0; 
}